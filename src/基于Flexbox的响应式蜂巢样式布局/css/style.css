@import url("https://fonts.googleapis.com/css?family=Montserrat:400,700");
body {
    font-family: 'Montserrat', sans-serif;
    background: #3ea0eb;
}
*, *::before, *::after {
    box-sizing: border-box;
}

.honeycomb {
    display: flex;
    /* flex-wrap 属性用于指定弹性盒子的子元素换行方式。 */
    flex-wrap: wrap;
    list-style: none;
    /* justify-content 用于设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式 
    flex-start	默认值。项目位于容器的开头。
    flex-end	项目位于容器的结尾。
    center	项目位于容器的中心。
    space-between	项目位于各行之间留有空白的容器内。
    space-around	项目位于各行之前、之间、之后都留有空白的容器内。
    */
    justify-content: center;
    /* align-items 属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。
    提示：使用每个弹性对象元素的 align-self 属性可重写 align-items 属性。 */
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0;
    /* Y轴方向即向下移动134.375个像素 */
    -webkit-transform: translateY(134.375px);
    transform: translateY(134.375px);
}
.honeycomb-cell {
    /* flex 属性用于指定弹性子元素如何分配空间。 */
    flex: 0 1 250px;
    max-width: 250px;
    height: 137.5px;
    margin: 65.4761904762px 12.5px 25px;
    position: relative;
    padding: 0.5em;
    text-align: center;
    z-index: 1;
}
.honeycomb-cell__title {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    /* 属性 hyphens 告知浏览器在换行时如何使用连字符连接单词。
    可以完全阻止使用连字符，也可以控制浏览器什么时候使用，或者让浏览器决定什么时候使用
    word-break，word-wrap属性也是用来设置单词换行方式的
    */
    -webkit-hyphens: auto;
    -ms-hyphens: auto;
    hyphens: auto;
    word-break: break-word;
    /* text-transform 属性控制文本的大小写。 uppercase 仅有大写 */
    text-transform: uppercase;
    color: #fff;
    font-weight: 700;
    font-size: 1.75em;
    transition: opacity 350ms;
}
.honeycomb-cell__title > small {
    font-weight: 300;
    margin-top: 0.25em;
}
.honeycomb-cell__image {
    /* object-fit （image,video）自适应 适配响应式布局
    fill: 中文释义“填充”。默认值。替换内容拉伸填满整个content box, 不保证保持原有的比例。
    contain: 中文释义“包含”。保持原有尺寸比例。保证替换内容尺寸一定可以在容器里面放得下。因此，此参数可能会在容器内留下空白。
    cover: 中文释义“覆盖”。保持原有尺寸比例。保证替换内容尺寸一定大于容器尺寸，宽度和高度至少有一个和容器一致。因此，此参数可能会让替换内容（如图片）部分区域不可见。
    none: 中文释义“无”。保持原有尺寸比例。同时保持替换内容原始尺寸大小。
    scale-down: 中文释义“降低”。就好像依次设置了none或contain, 最终呈现的是尺寸比较小的那个。 */
    -o-object-fit: cover;
    object-fit: cover;
    -o-object-position: center;
    object-position: center;
}
.honeycomb-cell::before, .honeycomb-cell::after {
    content: '';
}
.honeycomb-cell::before, .honeycomb-cell::after, .honeycomb-cell__image {
    top: -50%;
    left: 0;
    width: 100%;
    height: 200%;
    display: block;
    position: absolute;
    /* clip-path属性可以创建一个只有元素的部分区域可以显示的剪切区域。区域内的部分显示，
    区域外的隐藏。剪切区域是被引用内嵌的URL定义的路径或者外部svg的路径，或者作为一个形状
    例如circle().。clip-path属性代替了现在已经弃用的剪切 clip属性。 */
    -webkit-clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
    z-index: -1;
}
.honeycomb-cell::before {
    /* ::before配合transform属性的scale缩放功能，使得图片周围呈现一定宽度 #fff 颜色的边框 */
    background: #fff;
    -webkit-transform: scale(1.055);
    transform: scale(1.055);
}
.honeycomb-cell::after {
    /* ::after配合transition属性的动画功能，使得图片表面附上半透明 #3ea0eb 颜色 */
    background: #3ea0eb;
    opacity: 0.5;
    transition: opacity 350ms;
}
.honeycomb-cell:hover .honeycomb-cell__title {
    /* 鼠标滑过时，图片内颜色不可见 */
    opacity: 0;
}
.honeycomb-cell:hover::before {
    background: #72f88e;
}
.honeycomb-cell:hover::after {
    /* 图片表面不再覆盖任何颜色 */
    opacity: 0;
}
.honeycomb__placeholder {
    display: none;
    opacity: 0;
    width: 250px;
    margin: 0 12.5px;
}

/* media实现网页布局自适应 */
@media (max-width: 550) {
    .honeycomb-cell {
        margin: 81.25px 25px;
    }
}
@media (min-width: 550px) and (max-width: 825px) {
    .honeycomb-cell:nth-child(3n) {
        margin-right: calc(50% - 125px);
        margin-left: calc(50% - 125px);
    }

    .honeycomb__placeholder:nth-child(3n + 5) {
        display: block;
    }
}
@media (min-width: 825px) and (max-width: 1100px) {
    .honeycomb-cell:nth-child(5n + 4) {
      margin-left: calc(50% - 275px);
    }
  
    .honeycomb-cell:nth-child(5n + 5) {
      margin-right: calc(50% - 275px);
    }
  
    .honeycomb__placeholder:nth-child(5n), .honeycomb__placeholder:nth-child(5n + 3) {
      display: block;
    }
}
@media (min-width: 1100px) {
    .honeycomb-cell:nth-child(7n + 5) {
      margin-left: calc(50% - 400px);
    }
  
    .honeycomb-cell:nth-child(7n + 7), .honeycomb-cell:nth-child(7n + 5):nth-last-child(2) {
      margin-right: calc(50% - 400px);
    }
  
    .honeycomb__placeholder:nth-child(7n + 7), .honeycomb__placeholder:nth-child(7n + 9), .honeycomb__placeholder:nth-child(7n + 11) {
      display: block;
    }
}